创建型模式：抽象工厂(Abstract Factory)模式
一.定义：一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品就能得到同族的不同等级的产品的模式结构



二.模式结构
抽象工厂模式和工厂方法模式一样，也是由抽象工厂、具体工厂、抽象产品和具体产品4个角色构成，但是抽象工厂方法种方法个数不同，抽象产品的个数也不同
抽象工厂模式的主要角色如下：
1.抽象工厂(Abstract Factory):提供了创建产品的接口，它包含多个创建产品的方法,可以创建多个不同的产品
2.具体工厂(Concrete Factory):主要实现了抽象工厂种的多个抽象方法，完成具体的产品的创建
3.抽象产品(Product):定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式由多个抽象产品
4.具体产品(Concrete Product):实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一关系

三.抽象工厂模式应用场景
抽象工厂模式最早的应用是用于创建属于不同操作系统的视窗构件，如java的AWT中的Button和Text等构件在Windows和Unix中的本地实现是不同的
抽象工厂模式通常适用于以下场景
1.当需要创建的对象是一系列相互关联或相互依赖的对象时
2.系统中有多个产品族，但每次只使用棋子的某一族产品时
3.系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构

四.抽象工厂模式的扩展
抽象工厂模式的扩展有一定的“开闭原则”的倾斜性：
1.当增加一个新的产品族时只需要增加一个新的具体工厂，不需要修改原代码，满足开闭原则
2.当产品族中需要增加一个新种类的产品时，则所有的工厂类都需要进行修改，不满足开闭原则
当系统中只存在一个等级结构的产品时，抽象工厂模式将退化到工厂方法模式

五.个人理解
1.抽象工厂模式和工厂方法模式的区别就是工厂方法模式里面一个工厂只能创建一种类型的对象，而抽象工厂模式的一个工厂可以创建对中类型的对象
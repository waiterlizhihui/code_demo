行为型模式：命令(Command)模式
一.定义与特点
1.定义：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开，这样两者之间通过命令对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加和管理
2.优点：
·降低系统的耦合度，命令模式能将调用操作的对象与实现该操作的对象解耦
·增加或删除命令非常方便，采用命令模型增加与删除命令不会影响到其他类，它满足”开闭原则“，对扩展比较灵活
·可以实现宏命令。命令模式可以和组合模式结合，将多个命令装配成一个组合命令，即宏命令
·方便实现Undo和Redo操作。命令模式可以与后面介绍的”备忘录模式“结合，是实现命令的撤销与恢复

3.缺点：
·可能产生大量具体命令类，因此针对每一个具体操作都需要设计一个具体命令类，这将增加系统的复杂性

二.模式结构
命令模式主要包含以下角色：
1.抽象命令类(Command)角色：声明执行命令的接口，拥有执行命令的抽象方法execute()
2.具体命令类(Concrete Command)角色：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作
3.实现者/接收者(Receiver)角色：执行命令功能的相关操作，是具体命令对象业务的真正实现者
4.调用者/请求者(Invoker)角色：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者


三.命令模式的应用场景
1.当系统需要将请求调用者与请求接收者进行解耦时i，命令模式使得调用者和接收者不直接交互
2.当系统需要随机请求命令或经常增加或删除命令时，命令模式比较方便实现这些功能
3.当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能
4.当系统需要支持命令的撤销和恢复操作时，可以将命令对象存储起来，采用备忘录模式来实现

四.命令模式模式的扩展
1.在软件开发中，有时将命令模式与前面的组合模式联合使用，这就构成了宏命令模式，也叫组合命令模式，宏命令包含了一组命令，它充当了具体命令与调用者的双重角色，执行它时将递归调用它所包含的所有命令。

五.个人理解
1.命令模式的思想其实跟代理模式有点类似，代理模式是直接对类进行代理，而命令模式是对函数的参数进行了一层代理(用Command对象进行代理)，以此实现方法的调用者与实现者的解耦
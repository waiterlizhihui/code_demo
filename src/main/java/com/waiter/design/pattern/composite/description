结构型模式：组合(Composite)模式
一.定义与特点
1.定义：有时又叫部分-整体模式，它是一种将对象组合成树状的层次结构的模式，用来表示“部分-整体”的关系，使用户对单个对象和组合对象具有一致的访问性
2.优点：
·组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象还是组合对象，简化了客户端代码
·更容易在组合体内加入新的对象，客户端不会因为加入新的对象而更改源代码，满足“开闭原则”
3.缺点
·设计比较复杂，客户端需要花更多时间理清类之间的层次关系
·不容易限制容器中的构件
·不容易用继承的方法来增加构件的新功能

二.模式结构
组合模式分为透明式的组合模式和安全式的组合模式
1.透明方式：在该方式中，由于抽象构件声明了所有子类中的全部方法，所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的。
但其缺点是：树叶构件本来没有Add(),Remove(),GetChild()方法，却要实现它们(空实现或抛异常)，这样会带来一些安全性问题
2.安全方式：在该方式中，将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法，这样就避免了上一种方式的安全性问题，但由于叶子和分支有不同的接口，
客户端在调用的时候要知道树叶对象和树枝对象的存在，所以失去了透明性

组合模式包含以下主要角色
1.抽象构件(Component)角色：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为，在透明式的组合模式种抽象构件还要声明访问和管理子类的接口；
在安全式的组合模式中不声明访问和管理子类的接口，管理工作有树枝构件完成
2.树叶构件(Leaf)角色：是组合中的叶节点对象，它没有子节点，用于实现抽象构件中声明的公共接口
3.树枝构件(Composite)角色：是组合中的分支节点对象，它有子节点。它实现了抽象构件中声明的接口，它的主要作用是存储和管理子部件，通常包含Add(),Remove(),GetChild()等方法

三.组合模式应用场景
1.在需要表示一个对象整体与部分层次结构的场合
2.要求对方隐藏组合对象与单个对象的不同，用于可以用统一的接口使用组合结构中的所有对象的场合

四.组合模式地扩展
1.如果对组合模式中的树叶节点和树枝节点进行抽象，也就是说树叶节点和树枝节点还有子节点，这时组合模式就扩展成复杂的组合模式了

五.个人理解
1.组合模式就是通过对外提供一个统一的访问接口(抽象构件)，然后用树叶构件实现这个接口，由于这个接口的实现有很多个，所以需要使用树枝构件对这些树叶构件进行管理
